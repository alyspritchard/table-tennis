{"version":3,"sources":["components/Header/Header.js","components/Settings/Settings.js","components/Settings/index.js","data/actions.js","components/Match/Match.js","components/Match/index.js","components/Round/Round.js","components/Round/index.js","components/Tournament/Tournament.js","components/Tournament/index.js","components/App/App.js","components/App/index.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["Header","className","Settings","props","handleAudio","Audio","play","state","name","players","nameError","playersError","handleChange","bind","handleClick","handleStart","e","this","setState","currentTarget","value","preventDefault","trim","includes","length","Number","isInteger","Math","log2","handlePlayers","onClick","htmlFor","onChange","id","type","maxLength","placeholder","map","player","index","key","Component","connect","dispatch","addPlayers","Match","winner","handlePlayer1","handlePlayer2","match","roundsPlayed","round","updatedMatch","p1Score","p2Score","handleMatch","player1","player2","p1Win","p2Win","undefined","matches","submitted","Round","handleMatches","handleSubmit","handleChampion","stateMatch","filter","forEach","submitScores","endRound","a","endTournament","totalRounds","updateScores","finalMatch","Tournament","champion","handleNewTournament","rounds","i","push","championName","championMessage","roundMessage","App","inPlay","initial","matchID","assignPlayers","playing","array","j","floor","random","shuffle","p","winners","shift","roundComplete","reducer","action","startTournament","totalMatches","generateMatches","currentMatch","selectChampion","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f94e1cb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => (\n    <>\n        <div className=\"container--header title nes-container is-rounded\">\n            <h1>Table Tennis Tournament</h1>\n        </div>\n    </>\n);\n\nexport default Header;","import React, { Component } from \"react\";\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            name: \"\",\n            players: [],\n            nameError: false,\n            playersError: false\n\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleStart = this.handleStart.bind(this);\n        this.handleAudio = this.handleAudio.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({\n            name: e.currentTarget.value,\n            nameError: false,\n            playersError: false,\n        });\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n        let name = this.state.name.trim();\n\n        // name cannot be empty string or the same as another player\n        if (name !== \"\" && !this.state.players.includes(name)) {\n            this.setState({\n                players: [...this.state.players, name],\n                name: \"\"\n            });\n        } else {\n            this.setState({\n                nameError: true,\n            });\n        }\n    }\n\n    handleStart(e) {\n        e.preventDefault();\n\n        let { players } = this.state;\n\n        if (players.length >= 4 && Number.isInteger(Math.log2(players.length))) {\n            this.props.handlePlayers(players);\n        } else {\n            this.setState({\n                playersError: true,\n            });\n        }\n    }\n\n    // audio played when bcrikko clicked on\n    handleAudio = () => {\n        let a = new Audio(\"https://themushroomkingdom.net/sounds/wav/smb/smb_1-up.wav\");\n        a.play();\n    }\n\n    render() {\n        let { name, players, nameError, playersError } = this.state;\n\n        let playersErrorMessage = \"Don't forget what I said! You need a minimum of 4 players. The number of players also needs to be a power of 2! Don't ask me why, maths isn't my strong suit...\";\n        let nameErrorMessage = \"I need a valid name please! If the person you're trying to add, shares their name with someone already playing in the tournament, then they'll just have to change it by deed poll I'm afraid.\";\n        let welcomeMessage = \"Welcome! To create your tournament you'll need a minimum of 4 players, and the total number of players needs to be a power of 2 (i.e. 4, 8, 16, 32 ...)\";\n\n        return (\n            <div className=\"container\">\n                <section className=\"container--message message -right\">\n                    <div className=\"nes-balloon from-right\">\n                        <p>{ playersError ? playersErrorMessage : nameError ? nameErrorMessage : welcomeMessage }</p>\n                    </div>\n                    <i onClick={ this.handleAudio } className=\"nes-bcrikko\"></i>\n                </section> \n                <div className=\"container--grid\">\n                    <form className=\"add nes-container is-rounded\">\n                        <h2 className=\"title--container\">Add a Player</h2>\n                        <div className=\"nes-field is-inline\">\n                            <label htmlFor=\"playerName\">Name</label>\n                            <input \n                                onChange={ (e) => this.handleChange(e) } \n                                value={ name } id=\"playerName\" \n                                type=\"text\" \n                                maxLength=\"30\"\n                                placeholder=\"Princess Peach\"\n                                className={`nes-input ${nameError ? \"error\" : null}`}\n                            ></input>\n                        </div>\n                        <button \n                            className=\"nes-btn is-success\" \n                            onClick={ (e) => this.handleClick(e) }\n                        >Add 'em</button>\n                    </form>\n\n                    <div className=\"players lists nes-container is-rounded\">\n                        <h2 className=\"title--container\">Who's Playing?</h2>\n                        <p>So you don't forget...</p>\n                        <ul className=\"nes-list is-disc\">\n                            { players.map((player, index) => (\n                                <li key={ index } >{ player }</li>\n                            )) }\n                        </ul>\n                    </div>\n                </div>\n\n\n                <div className=\"container--button\">\n                    <button className=\"big-btn nes-btn is-success\" onClick={ this.handleStart }>Start Tournament!</button>\n                </div>\n            </div>\n        );\n    };\n}\n\nexport default Settings;","import { connect } from \"react-redux\";\n \nimport Settings from \"./Settings\";\nimport { addPlayers } from \"../../data/actions\";\n\nconst mapDispatchToProps = (dispatch) => { \n    return {\n        handlePlayers: (players) => dispatch(addPlayers(players)),\n    }; \n};\n\nexport default connect(null, mapDispatchToProps)(Settings);","export const addPlayers = (players) => {\n    // turning array of strings, into an array of objects, with a name key\n    players = players.map(player => ({ name: player }));\n    return { \n        type: \"initiate\",\n        players: players, \n    };\n};\n\nexport const updateScores = (match) => {\n    return { \n        type: \"updateRound\",\n        match: match, \n    };\n};\n\nexport const endRound = () => {\n    return { \n        type: \"nextRound\",\n    };\n};\n\nexport const endTournament = (match) => {\n    return { \n        type: \"endTournament\",\n        finalMatch: match,\n    };\n};\n\nexport const newTournament = () => {\n    return { \n        type: \"newTournament\",\n    };\n};","import React, { Component } from \"react\";\n\nclass Match extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            winner: 0,\n        }\n\n        this.handlePlayer1 = this.handlePlayer1.bind(this);\n        this.handlePlayer2 = this.handlePlayer2.bind(this);\n    }\n\n    handlePlayer1() {\n        let { match, roundsPlayed } = this.props;\n\n        if (match.round - 1 === roundsPlayed) {\n            let updatedMatch = {\n                ...match, \n                p1Score: 1, \n                p2Score: 0,\n            };\n            // pass match object up to Round component\n            this.props.handleMatch(updatedMatch);\n            this.setState({ winner: 1 });\n        }   \n    }\n\n    handlePlayer2() {\n        let { match, roundsPlayed } = this.props;\n\n        if (match.round - 1 === roundsPlayed) {\n            let updatedMatch = {\n                ...match, \n                p1Score: 0, \n                p2Score: 1,\n            };\n            // pass match object up to Round component\n            this.props.handleMatch(updatedMatch);\n            this.setState({ winner: 2 });\n        }  \n    }\n\n    render() {\n        let { players, match } = this.props;\n        let { winner } = this.state;\n\n        let player1 = players[match.player1];\n        let player2 = players[match.player2];\n\n        let p1Win = match.p1Score > match.p2Score ? \"warning\" : winner === 1 ? \"success\" : null;\n        let p2Win = match.p2Score > match.p1Score ? \"warning\" : winner === 2 ? \"success\" : null;\n\n        return (\n            <div className=\"match\">\n                <button \n                    onClick={ this.handlePlayer1 }\n                    // this isn't doing any actual styling yet - if scores are equal both players highlighted amber, else green if winning/red if losing\n                    className={ `nes-btn is-${p1Win}` }\n                >{ player1 === undefined ? \"?\" : player1.name }</button>\n\n                <button \n                    onClick={ this.handlePlayer2 }\n                    // this isn't doing any actual styling yet - if scores are equal both players highlighted amber, else green if winning/red if losing\n                    className={ `nes-btn is-${p2Win}` }\n                >{ player2 === undefined ? \"?\" : player2.name }</button>\n            </div>\n        );\n    };\n}\n\nexport default Match;","import { connect } from \"react-redux\";\n \nimport Match from \"./Match\";\n\n// import { updateScore } from \"../../data/actions\";\n\nconst mapStateToProps = ({ players, roundsPlayed, matches }, { match, handleMatch, submitted }) => { \n    return {\n        players: players,\n        roundsPlayed: roundsPlayed,\n        match: matches[match.id],\n        handleMatch: handleMatch,\n        submitted: submitted,\n    }; \n};\n\n// const mapDispatchToProps = (dispatch) => { \n//     return {\n//         player1Score: (matchID, score) => dispatch(updateScore(matchID, \"p1Score\", score)),\n//         player2Score: (matchID, score) => dispatch(updateScore(matchID, \"p2Score\", score)),\n//     }; \n// };\n\nexport default connect(mapStateToProps)(Match);","import React, { Component } from \"react\";\n\nimport Match from \"../Match\";\n\nclass Round extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            matches: [],\n            submitted: false,\n\t\t};\n\n        this.handleMatches = this.handleMatches.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChampion = this.handleChampion.bind(this);\n    }\n\n    handleMatches(match) {\n        // check if match already exists in state, if not, add it\n        if (!this.state.matches.map(stateMatch => stateMatch.id).includes(match.id)) {\n            this.setState({\n                matches: [...this.state.matches, match]\n            });\n        // the match already exists in state, so replace it\n        } else {\n            let matches = this.state.matches.map(stateMatch => (\n                stateMatch.id === match.id ? match : stateMatch\n            ));\n\n            this.setState({\n                matches: matches,\n            })\n        }\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        let { round } = this.props;\n\n        // check hasn't already been submitted & a winner has been picked for all matches in this round\n        if (!this.state.submitted && this.state.matches.length === this.props.matches.filter(match => match.round === round).length) {\n            this.state.matches.forEach(match => this.props.submitScores(match));\n            this.props.endRound();\n            this.setState({\n                submitted: true,\n            });\n        }\n    }\n\n    handleChampion(e) {\n        e.preventDefault();\n        let { round } = this.props;\n\n        let a = new Audio(\"https://themushroomkingdom.net/sounds/wav/smb/smb_world_clear.wav\");\n        \n        // check hasn't already been submitted & a winner has been picked\n        if (!this.state.submitted && this.state.matches.length === this.props.matches.filter(match => match.round === round).length) {\n            let match = this.state.matches[0];\n            \n            this.props.submitScores(match);\n            this.props.endTournament(match);\n            \n            this.setState({\n                submitted: true,\n            })\n\n            a.play();\n        }\n\n    }\n\n    render() {\n        let { round, totalRounds, matches } = this.props;\n\n        return (\n            <>\n                {/* show which round it is */}\n                <h2>{ round === totalRounds ? \"Final\" : \"Round\" + round }</h2>\n                \n                {/* generate a Match component for each match */}\n                { matches.filter(match => match.round === round).map((match, index) => (\n                    <Match \n                        key={ index } \n                        match={ match } \n                        handleMatch={ this.handleMatches }\n                    />\n                )) }\n\n                { round === totalRounds \n                    ? <button \n                        onClick={ (e) => this.handleChampion(e) }\n                        className=\"nes-btn is-success\"\n                    >Confirm</button>\n                    : <button \n                        onClick={ (e) => this.handleSubmit(e) }\n                        className=\"nes-btn is-success\"\n                    >Next Round</button> }\n            </>\n        ); \n    }\n}\n\nexport default Round;","import { connect } from \"react-redux\";\n \nimport Round from \"./Round\";\n\nimport { updateScores, endRound, endTournament } from \"../../data/actions\";\n\nconst mapStateToProps = ({ matches, totalRounds }, { round }) => { \n    return { \n        round: round,\n        matches: matches,\n        totalRounds: totalRounds,\n    }; \n};\n\nconst mapDispatchToProps = (dispatch) => { \n        return {\n            submitScores: (match) => dispatch(updateScores(match)),\n            endRound: () => dispatch(endRound()),\n            endTournament: (match) => dispatch(endTournament(match)),\n        }; \n    };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Round);","import React from \"react\";\n\nimport Round from \"../Round\";\n\nconst Tournament = ({ totalRounds, roundsPlayed, players, champion, handleNewTournament }) => {\n    const rounds = [];\n    for (let i = 1; i <= totalRounds; i += 1) {\n        rounds.push(<Round round={ i }/>)\n    }\n\n    // audio played when bcrikko clicked on\n    const handleAudio = () => {\n        let a = new Audio(\"https://themushroomkingdom.net/sounds/wav/smb/smb_1-up.wav\");\n        a.play();\n    }\n\n    // if champion has been chosen, get name\n    const championName = champion === -1 ? \"\" : players[champion].name;\n\n    let championMessage = `Congrats to our champion - ${championName}!! \\nHip, hip! Hooray!!`;\n    let finalMessage = \"Here it is, the final match! No cheating.\";\n    let roundMessage = `You're currently playing Round ${roundsPlayed + 1}. \\nClick on players to select them as the winner for their match. Once you're done click 'Next Round' to move on. \\nGood luck everyone!`;\n\n    return (\n        <div className=\"container\">\n            <section className=\"container--message message -right\">\n                <div className=\"nes-balloon from-right\">\n                    <p>{ totalRounds === roundsPlayed ? championMessage : roundsPlayed === totalRounds - 1 ? finalMessage : roundMessage }\n                    </p>\n                </div>\n                <i onClick={ handleAudio } className=\"nes-bcrikko\"></i>\n            </section>\n            \n            <div className=\"container--grid\">\n                { rounds.map((round, index) => (\n                    <div \n                        key={ index }\n                        className=\"round nes-container is-rounded\"\n                    >{ round }</div>\n                )) }\n            </div>\n\n            <div className=\"container--button\">\n                <button \n                    onClick={ handleNewTournament }\n                    className=\"big-btn nes-btn is-success\"\n                >New Tournament</button>\n            </div>\n        </div>\n    )\n};\n\nexport default Tournament;","import { connect } from \"react-redux\";\n \nimport Tournament from \"./Tournament\";\n\nimport { newTournament } from \"../../data/actions\";\n\nconst mapStateToProps = ({ totalRounds, roundsPlayed, players, champion }) => { \n    return {\n        totalRounds: totalRounds,\n        roundsPlayed: roundsPlayed,\n        players: players,\n        champion: champion,\n    }; \n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleNewTournament: () => dispatch(newTournament())\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tournament);","import React from \"react\";\n\nimport Header from \"../Header/Header\";\nimport Settings from \"../Settings\"\nimport Tournament from \"../Tournament\"\n\nconst App = ({ inPlay }) => (\n  <>\n    <Header />\n    { !inPlay ? <Settings /> : <Tournament /> }\n  </>\n);\n\nexport default App;\n","import { connect } from \"react-redux\";\n \nimport App from \"./App\";\n\nconst mapStateToProps = ({ inPlay }) => { \n    return {\n        inPlay: inPlay,\n    }; \n};\n\nexport default connect(mapStateToProps)(App);","const initial = {\n    players: [],\n    matches: [],\n    inPlay: false,\n    roundsPlayed: 0,\n    totalRounds: 0,\n    champion: -1,\n};\n\nexport default initial;","import initial from \"./initial\";\n\n// add players\nconst addPlayers = (state, { players }) => {\n    return {\n        ...state,\n        players: players,\n        totalRounds: Math.log2(players.length),\n    };\n};\n\n// shuffle an array\nconst shuffle = (array) => {\n    // use Fisher-Yates algorithm to shuffle arrays\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n};\n\n// setup counter for matchID\nlet matchID = 0;\n\n// generate matches\nconst generateMatches = (state) => {\n    let totalRounds = Math.log2(state.players.length);\n    let matches = [];\n    let totalMatches = state.players.length / 2;\n    \n    for (let i = 1; i <= totalRounds; i += 1) {\n        for (let j = 1; j <= totalMatches; j += 1) {\n            matches.push({\n                id: matchID,\n                round: i,\n                player1: null,\n                player2: null,\n                p1Score: 0,\n                p2Score: 0,\n            });\n            matchID += 1;\n        }\n        totalMatches = totalMatches / 2;\n    }\n    \n    // update state\n    return {\n        ...state,\n        matches: matches,\n    };\n};\n\n// calculate winner from match object\nconst winner = (match) => match.p1Score > match.p2Score ? match.player1 : match.player2;\n\n// assign players\nconst assignPlayers = (state) => {\n    let playing = [];\n    // work out who is playing in this round\n    if (state.roundsPlayed === 0) {\n        playing = shuffle(state.players.map((p, index) => index));\n    } else {\n        let matches = state.matches.filter(match => match.round === state.roundsPlayed);\n        let winners = matches.map(match => winner(match));\n        playing = winners;\n    }\n\n    let matches = state.matches.map(match => {\n        if (match.round === state.roundsPlayed + 1) {\n            return {\n                ...match,\n                player1: playing.shift(),\n                player2: playing.shift(),\n            };\n        }\n        return match;\n    })\n\n    // update state\n    return {\n        ...state,\n        matches: matches,\n    };\n};\n\nconst startTournament = (state) => {\n    return {\n        ...state,\n        inPlay: true,\n    };\n};\n\nconst updateScores = (state, { match }) => {\n    let matches = state.matches.map(currentMatch => {\n        if (currentMatch.id === match.id) {\n            return {\n                ...currentMatch,\n                p1Score: match.p1Score,\n                p2Score: match.p2Score,\n            };\n        }\n        return currentMatch;\n    })\n\n    return {\n        ...state,\n        matches: matches,\n    };\n};\n\nconst roundComplete = (state) => {\n    return {\n        ...state,\n        roundsPlayed: state.roundsPlayed + 1,\n    }\n}\n\nconst selectChampion = (state, { finalMatch }) => {\n    const champion = winner(finalMatch);\n    \n    return {\n        ...state,\n        champion: champion,\n    }\n}\n\nconst reset = () => {\n    return {\n        ...initial\n    }\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"initiate\": return startTournament(assignPlayers(generateMatches(addPlayers(state, action))));\n        case \"updateRound\": return updateScores(state, action);\n        case \"nextRound\": return assignPlayers(roundComplete(state));\n        case \"endTournament\": return roundComplete(selectChampion(state, action));\n        case \"newTournament\": return reset(state);\n        default: return state; \n    }; \n};\n\nexport default reducer;","import { createStore, compose } from \"redux\";\n\nimport persistState from \"redux-localstorage\";\n\nimport initial from \"./initial\";\nimport reducer from \"./reducer\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer, \n    initial, \n    composeEnhancers(persistState()),\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './data/store';\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n"],"sourceRoot":""}